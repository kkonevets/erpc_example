/*
 * Generated by erpcgen 1.13.0 on Tue Jul 23 17:26:28 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include <new>
#include "c_example_server.h"
#include "example_server.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


class IO_server: public IO_interface
{
    public:
        virtual ~IO_server() {};


        void set_led(LEDName whichLed, bool onOrOff)
        {
            ::set_led(whichLed, onOrOff);
        }
};

ERPC_MANUALLY_CONSTRUCTED_STATIC(IO_service, s_IO_service);
ERPC_MANUALLY_CONSTRUCTED_STATIC(IO_server, s_IO_server);

erpc_service_t create_IO_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) IO_service(new (nothrow)IO_server());
#else
    if (s_IO_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_IO_server.construct();
        s_IO_service.construct(s_IO_server.get());
        service = s_IO_service.get();
    }
#endif

    return service;
}

void destroy_IO_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (service)
    {
        delete (IO_server *)(((IO_service *)service)->getHandler());
        delete (IO_service *)service;
    }
#else
    (void)service;
    erpc_assert(service == s_IO_service.get());
    s_IO_service.destroy();
    s_IO_server.destroy();
#endif
}

